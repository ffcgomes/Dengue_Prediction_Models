source('~/.active-rstudio-document')
install.packages("h20")
install.packages("h2o")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('C:/Users/ffcgo/Google Drive/DS/_Modelos_Machine_Learning/Dengue_Prediction/modelos_linear_svm_randomforest/modelo_linear_svm_reandomforest.R')
setwd("C:/Users/ffcgo/Google Drive/DS/_Modelos_Machine_Learning/Dengue_Prediction/modelos_linear_svm_randomforest")
source('C:/Users/ffcgo/Google Drive/DS/_Modelos_Machine_Learning/Dengue_Prediction/modelos_linear_svm_randomforest/modelo_linear_svm_reandomforest.R')
#Input Data
train<-read.csv('Sobral_Train.csv')
test<-read.csv('Sobral_Test.csv')
expl<-read.csv('Sobral_Train_Label.csv')
#combine training data set and its total cases
train$Infectados<-expl$Infectados
head(train)
#head(test)
#See how many percent of NAs in each columns in training and testing data set
colSums(is.na(train))/dim(train)[1]*100
colSums(is.na(test))/dim(test)[1]*100
#Delete all of NAs in training data set
train<-na.omit(train)
####Replace NA with the most last value in test dataset
library(zoo)
test$Precipitacao<-na.locf(test$Precipitacao)
test$TempMaxima<-na.locf(test$TempMaxima)
test$TempMinima<-na.locf(test$TempMinima)
test$Insolacao<-na.locf(test$Insolacao)
test$Evaporacao_Piche<-na.locf(test$Evaporacao_Piche)
test$Temp_Comp_Med<-na.locf(test$Temp_Comp_Med)
test$Umidade_Rel_Med<-na.locf(test$Umidade_Rel_Med)
test$Vel_Vento_Med<-na.locf(test$Vel_Vento_Med)
#Check Whether there is any NA in each column
colSums(is.na(test))
str(test)
############Delete Identification Columns in Training data set
#train$city<-as.factor(train$city)
train$city=NULL
train$year<-NULL
train$weekofyear<-as.factor(train$weekofyear)
train$week_start_date<-NULL
############Delete Identification Columns in Testing data set
#test$city<-as.factor(test$city)
test$city=NULL
test$year<-NULL
test$weekofyear<-as.factor(test$weekofyear)
test$week_start_date<-NULL
####Create Dummy Variables
library(dummies)
train<-dummy.data.frame(train)
test<-dummy.data.frame(test)
####Random Split as training and validation
random<-sample(1:dim(train)[1])
pct2o3<-floor(dim(train)[1]*2/3)
train_df<-train[random[1:pct2o3],]
vali_df<-train[random[(pct2o3+1):dim(train)[1]],]
####Linear Model
lm1<-lm(data = train_df,Infectados~.)
summary(lm1)
#lm2<-lm(data= train_df,Infectados~weekofyear36)
#summary(lm2)
#Make prediction on validation dataset and calculate MAE
lmPred<-predict(lm1,vali_df)
MAE_lm<-mean(abs(lmPred-vali_df$Infectados))
cat('MAE_lm:',MAE_lm)
#Build SVM model, try different parameter of C
library(kernlab)
svmOutput1<-ksvm(Infectados~.,data=train_df, kernel="rbfdot",kpar="automatic",C=0.6,cross=3,prob.model=TRUE)
svmOutput2<-ksvm(Infectados~.,data=train_df, kernel="rbfdot",kpar="automatic",C=1,cross=3,prob.model=TRUE)
svmOutput3<-ksvm(Infectados~.,data=train_df, kernel="rbfdot",kpar="automatic",C=1.5,cross=3,prob.model=TRUE)
svmOutput1
svmOutput3
#Make prediction on validation dataset
svmPred<-predict(svmOutput3,vali_df,type="votes")
MAE_svm<-mean(abs(svmPred-vali_df$Infectados))
MAE_svm
#Build the model
require(randomForest)
require(MASS)
rf1<-randomForest(train_df$Infectados~.,data=train_df,ntree=50,cross=3)
rf2<-randomForest(train_df$Infectados~.,data=train_df,ntree=250,cross=3)
rf3<-randomForest(train_df$Infectados~.,data=train_df,ntree=500,cross=3)
rf1
rf2
rf3
rfPred<-predict(rf2,vali_df)
MAE_rf<-mean(abs(rfPred-vali_df$Infectados))
MAE_rf
#Input Data
train<-read.csv('Sobral_Train.csv')
test<-read.csv('Sobral_Test.csv')
expl<-read.csv('Sobral_Train_Label.csv')
#combine training data set and its total cases
train$Infectados<-expl$Infectados
head(train)
#head(test)
#See how many percent of NAs in each columns in training and testing data set
colSums(is.na(train))/dim(train)[1]*100
colSums(is.na(test))/dim(test)[1]*100
#Delete all of NAs in training data set
train<-na.omit(train)
####Replace NA with the most last value in test dataset
library(zoo)
test$Precipitacao<-na.locf(test$Precipitacao)
test$TempMaxima<-na.locf(test$TempMaxima)
test$TempMinima<-na.locf(test$TempMinima)
test$Insolacao<-na.locf(test$Insolacao)
test$Evaporacao_Piche<-na.locf(test$Evaporacao_Piche)
test$Temp_Comp_Med<-na.locf(test$Temp_Comp_Med)
test$Umidade_Rel_Med<-na.locf(test$Umidade_Rel_Med)
test$Vel_Vento_Med<-na.locf(test$Vel_Vento_Med)
#Check Whether there is any NA in each column
colSums(is.na(test))
str(test)
############Delete Identification Columns in Training data set
#train$city<-as.factor(train$city)
train$city=NULL
train$year<-NULL
train$weekofyear<-as.factor(train$weekofyear)
train$week_start_date<-NULL
############Delete Identification Columns in Testing data set
#test$city<-as.factor(test$city)
test$city=NULL
test$year<-NULL
test$weekofyear<-as.factor(test$weekofyear)
test$week_start_date<-NULL
####Create Dummy Variables
library(dummies)
train<-dummy.data.frame(train)
test<-dummy.data.frame(test)
####Random Split as training and validation
random<-sample(1:dim(train)[1])
pct2o3<-floor(dim(train)[1]*2/3)
train_df<-train[random[1:pct2o3],]
vali_df<-train[random[(pct2o3+1):dim(train)[1]],]
####Linear Model
lm1<-lm(data = train_df,Infectados~.)
summary(lm1)
#lm2<-lm(data= train_df,Infectados~weekofyear36)
#summary(lm2)
#Make prediction on validation dataset and calculate MAE
lmPred<-predict(lm1,vali_df)
MAE_lm<-mean(abs(lmPred-vali_df$Infectados))
cat('MAE_lm:',MAE_lm)
#Build SVM model, try different parameter of C
library(kernlab)
svmOutput1<-ksvm(Infectados~.,data=train_df, kernel="rbfdot",kpar="automatic",C=0.6,cross=3,prob.model=TRUE)
svmOutput2<-ksvm(Infectados~.,data=train_df, kernel="rbfdot",kpar="automatic",C=1,cross=3,prob.model=TRUE)
svmOutput3<-ksvm(Infectados~.,data=train_df, kernel="rbfdot",kpar="automatic",C=1.5,cross=3,prob.model=TRUE)
svmOutput1
svmOutput3
#Make prediction on validation dataset
svmPred<-predict(svmOutput3,vali_df,type="votes")
MAE_svm<-mean(abs(svmPred-vali_df$Infectados))
MAE_svm
#Build the model
require(randomForest)
require(MASS)
rf1<-randomForest(train_df$Infectados~.,data=train_df,ntree=50,cross=3)
rf2<-randomForest(train_df$Infectados~.,data=train_df,ntree=250,cross=3)
rf3<-randomForest(train_df$Infectados~.,data=train_df,ntree=500,cross=3)
rf1
rf2
rf3
rfPred<-predict(rf2,vali_df)
MAE_rf<-mean(abs(rfPred-vali_df$Infectados))
MAE_rf
